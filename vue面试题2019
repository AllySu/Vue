一、对于MVVM的理解？
MVVM 是 Model-View-ViewModel 的缩写。

Model代表数据模型，也可以在Model中定义数据修改和操作的业务逻辑。

View 代表UI 组件，它负责将数据模型转化成UI 展现出来。

ViewModel 监听模型数据的改变和控制视图行为、处理用户交互，简单理解就是一个同步View 和 Model的对象，连接Model和View。

在MVVM架构下，View 和 Model 之间并没有直接的联系，而是通过ViewModel进行交互，Model 和 ViewModel 之间的交互是双向的， 因此View 数据的变化会同步到Model中，而Model 数据的变化也会立即反应到View 上。


图片描述(最多50字)


ViewModel 通过双向数据绑定把 View 层和 Model 层连接了起来，而View 和 Model 之间的同步工作完全是自动的，无需人为干涉，因此开发者只需关注业务逻辑，不需要手动操作DOM, 不需要关注数据状态的同步问题，复杂的数据状态维护完全由 MVVM 来统一管理。

二、Vue的生命周期
官网完整流程图：


图片描述(最多50字)
beforeCreate（创建前） 在数据观测和初始化事件还未开始。

created（创建后） 完成数据观测，属性和方法的运算，初始化事件，$el属性还没有显示出来。

beforeMount（载入前） 在挂载开始之前被调用，相关的render函数首次被调用。实例已完成以下的配置：编译模板，把data里面的数据和模板生成html。注意此时还没有挂载html到页面上。

mounted（载入后） 在el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用。实例已完成以下的配置：用上面编译好的html内容替换el属性指向的DOM对象。完成模板中的html渲染到html页面中。此过程中进行ajax交互。

beforeUpdate（更新前） 在数据更新之前调用，发生在虚拟DOM重新渲染和打补丁之前。可以在该钩子中进一步地更改状态，不会触发附加的重渲染过程。

updated（更新后） 在由于数据更改导致的虚拟DOM重新渲染和打补丁之后调用。调用时，组件DOM已经更新，所以可以执行依赖于DOM的操作。然而在大多数情况下，应该避免在此期间更改状态，因为这可能会导致更新无限循环。该钩子在服务器端渲染期间不被调用。

beforeDestroy（销毁前） 在实例销毁之前调用。实例仍然完全可用。

destroyed（销毁后） 在实例销毁之后调用。调用后，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务器端渲染期间不被调用。

1.什么是vue生命周期？

答： Vue 实例从创建到销毁的过程，就是生命周期。从开始创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、销毁等一系列过程，称之为 Vue 的生命周期。

2.vue生命周期的作用是什么？

答：它的生命周期中有多个事件钩子，让我们在控制整个Vue实例的过程时更容易形成好的逻辑。

3.vue生命周期总共有几个阶段？

答：它可以总共分为8个阶段：创建前/后, 载入前/后,更新前/后,销毁前/销毁后。

4.第一次页面加载会触发哪几个钩子？

答：会触发 下面这几个beforeCreate, created, beforeMount, mounted 。

5.DOM 渲染在 哪个周期中就已经完成？

答：DOM 渲染在 mounted 中就已经完成了。

Vue源码构建，基于Rollup
根据format 构建格式可分为三个版（在根据有无compiler，每个版中又可以再分出二个版本）

vue本质：构造函数
function Vue(option){
 if( process.env.NODE_ENV！==production&&！(this instanceof Vue)){
warn('Vue is a constructor and should be called with the `new` keyword')
}
this._init(options)
}
数据驱动
1.new Vue

2.init

3.Vue 实例挂载$mount

4.compiler

5.render Vue的_render方法是实例的一个私有方法，最终会把实例渲染成一个虚拟Node

6.Virtual DOM(虚拟dom):本质上是一个原生的JS对象，用class来定义

7.update的核心：调用vm.__patch__方法

8.DOM：Vue最终创建的DOM

组件化
1.introduction

2.createComponent

3.patch

4.合并配置

5.生命周期

6.组件注册

6.1全局注册
6.2局部注册
7.异步组件

7.1普通函数异步组件
7.2Promise异步组件
7.3高级异步组件



响应式原理
1.响应式对象：利用了ES5的Object.defineProperty.

2.依赖收集：响应式对象getter相关的逻辑就是做依赖收集

3.派发更新

4.nextTick

5.检测变化的注意事项

6.计算属性 VS 侦听属性

7.组件更新：过程的核心就是新旧vnode diff，对新旧节点相同以及不同的情况分别做不同的处理

编译
1.introduction

2.编译入口

3.parse

4.optimize

5.codegen

6.directives

扩展
1.event

编译
DOM事件
自定义事件
2.v-model

实现
总结
3.slot

编译
普通插槽
作用域插槽
4.keep-alive

内置组件
组件渲染
生命周期
5.transition

6.transition-group



Vue-Router
1.introduction

Vue-Router 的能力十分强大，它支持 hash、history、abstract 3 种路由方式，提供了 和 2 种组件，还提供了简单的路由配置和一系列好用的 API。注意：本思维导图主要讲的是 hash 模式下的。
2. 路由注册

Vue.use

Vue 提供了 Vue.use 的全局 API 来注册这些插件，比如注册 VueRouter。
路由安装

VueRouter 本质上是一个类，实现了 install 的静态方法：VueRouter.install = install，当执行 Vue.use(VueRouter) 的时候，实际上就是在执行 install 函数
Vue-Router 安装最重要的一步就是利用 Vue.mixin 去把 beforeCreate 和 destroyed 钩子函数注入到每一个组件中。
通过 Vue.component 方法定义了全局的 和 2 个组件，这也是为什么我们在写模板的时候可以使用这两个标签
3.VueRouter对象

1.VueRouter 的实现是一个类，定义了一些属性和方法。

2.当我们执行 new VueRouter 的时候

在浏览器不支持 history.pushState 的情况下，根据传入的 fallback 配置参数，决定是否回退到 hash 模式。
实例化 VueRouter 后会返回它的实例 router
3.组件在执行 beforeCreate 钩子函数的时候，如果传入了 router 实例，都会执行 router.init 进行初始化。

4.然后又会执行 history.transitionTo 方法做路由过渡，进而引出了 matcher 的概念。

4.matcher

①createMatcher

createMatcher 的初始化就是根据路由的配置描述建立映射表，包括路径、名称到路由 record 的映射关系。
②addRoutes

addRoutes 方法的作用是动态添加路由配置，因为在实际开发中有些场景是不能提前把路由写死的，需要根据一些条件动态添加路由
function addRoutes (routes) { createRouteMap(routes, pathList, pathMap, nameMap) }
addRoutes 的方法十分简单，再次调用 createRouteMap 即可，传入新的 routes 配置，由于 pathList、pathMap、nameMap 都是引用类型，执行 addRoutes 后会修改它们的值。
③match

match 会根据传入的位置和路径计算出新的位置并匹配到相应的路由 record ，然后根据新的位置 和 record 创建新的路径并返回。
通过 matcher 的 match 方法，我们会找到匹配的路径 Route，这个对 Route 的切换，组件的渲染都有非常重要的指导意义。
5.路径切换

history.transitionTo
导航守卫
url(hash模式)
组件
Vuex
1.introduction

2.Vuex初始化

安装
Store实例化
3.API

数据获取
数据存储
语法糖
动态更新模块
4.插件

Vuex除了提供的存取能力，还提供了插件能力，让我们可以监控store的变化过程做一些事情
